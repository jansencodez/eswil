import React, { useState, useEffect } from "react";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ChartOptions,
} from "chart.js";
import { ArcElement } from "chart.js/auto";
import baseUrl from "@/utils/baseUrl";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

// Types
interface Activity {
  date: string;
  reportType: string;
  generatedBy: string;
  status: string;
}

interface MonthlyReport {
  month: string;
  reports: number;
}

interface ReportData {
  totalStudents: number;
  totalTeachers: number;
  reportsGenerated: number;
  monthlyReports: MonthlyReport[];
  recentActivities: Activity[];
}

const Reports: React.FC = () => {
  // State to store fetched data
  const [reportData, setReportData] = useState<ReportData | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch data on component mount
  useEffect(() => {
    const fetchReportData = async () => {
      try {
        const response = await fetch(`${baseUrl}/reports`);
        if (!response.ok) {
          throw new Error("Failed to fetch report data");
        }
        const data: ReportData = await response.json();
        setReportData(data);
      } catch (error: unknown) {
        if (error instanceof Error) {
          setError(error.message);
        }
      } finally {
        setLoading(false);
      }
    };

    fetchReportData();
  }, []);

  // If still loading, display a loading message
  if (loading) return <div>Loading...</div>;

  // If there's an error, display an error message
  if (error) return <div>Error: {error}</div>;

  // Chart data based on the fetched data

  if (!reportData) {
    return <div>Loading...</div>;
  }
  const data = {
    labels: reportData.monthlyReports.map((item) => item.month),
    datasets: [
      {
        label: "Reports Generated",
        data: reportData.monthlyReports.map((item) => item.reports),
        borderColor: "rgba(75, 192, 192, 1)",
        backgroundColor: ["#FFCE56", "#4CAF50"],
        borderWidth: 1,
        fill: true,
        tension: 0.3,
      },
    ],
  };

  // Chart options
  const options: ChartOptions<"line"> = {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: "Monthly Report Summary",
      },
      tooltip: {
        mode: "index",
        intersect: false,
      },
    },
  };

  return (
    <div className="p-6 bg-white rounded-lg shadow-md w-full h-full">
      <h2 className="text-2xl font-bold mb-6 text-gray-800">
        Reports Overview
      </h2>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="p-4 bg-blue-100 rounded-lg shadow">
          <h3 className="text-lg font-semibold text-blue-800">
            Total Students
          </h3>
          <p className="text-3xl font-bold text-blue-600">
            {reportData.totalStudents}
          </p>
        </div>
        <div className="p-4 bg-green-100 rounded-lg shadow">
          <h3 className="text-lg font-semibold text-green-800">
            Total Teachers
          </h3>
          <p className="text-3xl font-bold text-green-600">
            {reportData.totalTeachers}
          </p>
        </div>
        <div className="p-4 bg-purple-100 rounded-lg shadow">
          <h3 className="text-lg font-semibold text-purple-800">
            Reports Generated
          </h3>
          <p className="text-3xl font-bold text-purple-600">
            {reportData.reportsGenerated}
          </p>
        </div>
      </div>

      {/* Recent Activity Table */}
      <div className="bg-gray-50 rounded-lg shadow mb-6">
        <h3 className="text-xl font-semibold text-gray-700 p-4">
          Recent Activity
        </h3>
        <div className="overflow-x-auto">
          <table className="min-w-full text-left">
            <thead>
              <tr className="bg-gray-100 text-gray-600 text-sm uppercase">
                <th className="py-2 px-4">Date</th>
                <th className="py-2 px-4">Report Type</th>
                <th className="py-2 px-4">Generated By</th>
                <th className="py-2 px-4">Status</th>
              </tr>
            </thead>
            <tbody className="text-gray-500">
              {reportData.recentActivities.map((activity, index) => (
                <tr key={index} className="border-b">
                  <td className="py-2 px-4">{activity.date}</td>
                  <td className="py-2 px-4">{activity.reportType}</td>
                  <td className="py-2 px-4">{activity.generatedBy}</td>
                  <td className="py-2 px-4 text-green-500">
                    {activity.status}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Chart */}
      <div className="bg-white p-4 rounded-lg shadow">
        <h3 className="text-xl font-semibold text-gray-700 mb-4">
          Monthly Reports Summary
        </h3>
        <div className="h-64">
          <Line data={data} options={options} />
        </div>
      </div>
    </div>
  );
};

export default Reports;
